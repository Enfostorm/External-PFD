#: kivy 2.0.0

# ==================================================================================================
# ===================================== Sectie PFD =================================================
# ==================================================================================================
<PFD>:
    BoxLayout:                          # Artificial horizon
        orientation: 'vertical'
        size: root.size
        pos: root.pos
        HorizonEverything:
            id: horizon
            size: root.size
            pos: root.pos

        BoxLayout:                      # Center row of displays
            size_hint_y: 0.15
            pos: root.pos
            orientation: 'horizontal'
            BugButton:
            BugButton:
            BugButton:
            BugButton:
            BugButton:
            BugButton:

        CompassEverything:
            id: compass
            size: root.size
            pos: root.pos

# ==================================================================================================
# ===================================== Sectie Horizon =============================================
# ==================================================================================================
# ==================================== Templates ====================================
<PitchLine@Line>:            # Should work but the width does not change?? Line does get drawn with these
    width: root.height/800
    cap: 'square'

<RightLabel@Label>:
    font_size: root.height / 35    # Tekstgrootte schaalt automatisch mee met de hoogte van de widget
    text_size: root.height / 5, root.height / 27
    halign: 'left'
    font_name: 'B612-Regular'
<LeftLabel@RightLabel>:
    halign: 'right'
# ==================================== Components ====================================
<Horizon>:
    pos: root.pos
    size: root.size
# Two Rectangles which make up the artificial horizon.
    canvas:
        Color:
            rgb: 51/256, 128/256, 236/256       # Blue, upper rectangle
        Rectangle:
            pos: root.x + self.width * (-4.5), root.y + self.height / 2 - root.pitch * self.height / (10 * root.scale)
            size: self.width * 10, self.height * 10

        Color:
            rgb: 160/256, 74/256, 36/256        # Brown, lower rectangle
        Rectangle:
            pos: root.x + root.width * (-4.5), root.y -root.height * (10 - 0.5) - root.pitch * self.height / (10 * root.scale)
            size: root.width * 10, root.height * 10

<HorizonMask>:
# Horizon with a transparent cutout in the middle to only show the gradation in a central area
    size: root.size
    pos: root.pos

    canvas:
        StencilPush:     # makes the shape for the mask
        Rectangle:      # Top rectangle
            pos: root.x, root.y + root.height - root.tightness * root.height
            size: root.width, root.tightness * root.height         + root.height  # + root.height for rotation

        Rectangle:      # Bottom rectangle
            pos: root.x, root.y - root.height
            size: root.width, root.tightness * root.height + root.height

        StencilUse:
        Color:
            rgb: 51/256, 128/256, 236/256       # Blue, upper rectangle
        Rectangle:
            pos: root.x + self.width * (-4.5), root.y + self.height / 2 - root.pitch * self.height / (10 * root.scale)
            size: self.width * 10, self.height * 10

        Color:
            rgb: 160/256, 74/256, 36/256        # Brown, lower rectangle
        Rectangle:
            pos: root.x + root.width * (-4.5), root.y -root.height * (10 - 0.5) - root.pitch * self.height / (10 * root.scale)
            size: root.width * 10, root.height * 10

        StencilUnUse:    # removes the shape for the mask, same arguments as StencilPush
        Rectangle:      # Top rectangle
            pos: root.x , root.y - root.height - root.tightness * root.height
            size: root.width, root.height/3

        StencilPop:



<HorizonAndPitch>:
    horizon: horizon
    gradation: gradation
    mask: mask
    size: root.size
    pos: root.pos
    Horizon:
        pos: root.pos
        id: horizon

    PitchGradationFull:
        pos: root.pos
        id: gradation

    HorizonMask:
        pos: root.pos
        id: mask

<HorizonPitchAndRoll>:
    pos: root.pos
    layout: layout                  # id passthroughs
    horizpitch: horizpitch
    
    FloatLayout:
        id: layout
        horizpitch: horizpitch
        size: root.size
        pos: root.pos

        HorizonAndPitch:
            size: root.size
            pos: root.pos
            id: horizpitch

        Image:
            source: 'images/rollindicator.png'
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
            size_hint: 999, 0.85        # Big value to prevent being limited by size in x
            allow_stretch: True         # enable picture to scale above 100%, aspect ratio stays

<PitchGradationSegment>:
# Creates one segment of the pitch gradations with 4 lines:
# ____________________
#        _____
#     ___________
#        _____
    pos: root.pos
    canvas:
        Color:
            rgb: 1, 1, 1
        Line:
            points: self.center_x - (root.height/50) * root.bigLineWidth,   self.center_y,                                  self.center_x + (root.height/50) * root.bigLineWidth,   self.center_y
            width: root.height/600
            cap: 'square'
        Line:
            points: self.center_x - (root.height/50) * root.smallLineWidth, self.center_y - root.height*(1/(4*root.scale)), self.center_x + (root.height/50) * root.smallLineWidth, self.center_y - root.height*(1/(4*root.scale))
            width: root.height/600
            cap: 'square'
        Line:
            points: self.center_x - (root.height/50) * root.medLineWidth,   self.center_y - root.height*(2/(4*root.scale)), self.center_x + (root.height/50) * root.medLineWidth,   self.center_y - root.height*(2/(4*root.scale))
            width: root.height/600
            cap: 'square'
        Line:
            points: self.center_x - (root.height/50) * root.smallLineWidth, self.center_y - root.height*(3/(4*root.scale)), self.center_x + (root.height/50) * root.smallLineWidth, self.center_y - root.height*(3/(4*root.scale))
            width: root.height/600
            cap: 'square'

<PitchGradationFull>:
# Creates a stack of PitchGradationSegments with numbers:
#             ...
#  10 ____________________ 10
#            _____
#         ___________
#            _____
#   0 ____________________ 0
#            _____
#         ___________
#            _____
# -10 ____________________ -10
#            _____
#         ___________
#            _____
#             ...
# 
# I would much rather use some iterative function for this, but I can't figure out how I would do that.
    FloatLayout:
        size: root.size
        pos: root.pos
        PitchGradationSegment:  # Central segment
            pos: root.x, root.y - root.pitch * self.height / (10*root.scale)

        PitchGradationSegment:  # Lower segments
            pos: root.x, root.y - 1 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 2 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 3 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 4 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 5 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 6 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 7 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 8 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y - 9 * root.height/root.scale - root.pitch * self.height / (10*root.scale)

        PitchGradationSegment:  # Upper segments
            pos: root.x, root.y + 1 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 2 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 3 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 4 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 5 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 6 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 7 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 8 * root.height/root.scale - root.pitch * self.height / (10*root.scale)
        PitchGradationSegment:
            pos: root.x, root.y + 9 * root.height/root.scale - root.pitch * self.height / (10*root.scale)



        RightLabel:     # Central labels
            text: '0'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '0'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.pitch * self.height / (10*root.scale)
            

        RightLabel:     # negative value labels
            text: '-10'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(1/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-10'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(1/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-20'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(2/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-20'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(2/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-30'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(3/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-30'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(3/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-40'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(4/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-40'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(4/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-50'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(5/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-50'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(5/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-60'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(6/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-60'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(6/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-70'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(7/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-70'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(7/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-80'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(8/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-80'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(8/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '-90'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y - root.height*(9/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '-90'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y - root.height*(9/root.scale) - root.pitch * self.height / (10*root.scale)


        RightLabel:     # positive value labels
            text: '10'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(1/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '10'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(1/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '20'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(2/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '20'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(2/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '30'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(3/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '30'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(3/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '40'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(4/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '40'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(4/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '50'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(5/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '50'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(5/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '60'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(6/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '60'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(6/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '70'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(7/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '70'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(7/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '80'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(8/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '80'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(8/root.scale) - root.pitch * self.height / (10*root.scale)

        RightLabel:
            text: '90'
            pos: root.x + (root.height/23) * root.bigLineWidth, root.y + root.height*(9/root.scale) - root.pitch * self.height / (10*root.scale)
        LeftLabel:
            text: '90'
            pos: root.x - (root.height/23) * root.bigLineWidth, root.y + root.height*(9/root.scale) - root.pitch * self.height / (10*root.scale)
        



# ------------------------------ Non-rotating components ------------------------------

<RollTriangle>:
    FloatLayout:
        size: root.size
        pos: root.pos
        Image:
            source: 'images/rolltriangle.png'
            pos_hint: {'center_x': 0.5, 'center_y': 0.892}      # 0.892 is the value to place the triangle on the edge of the ring
            size_hint_y: 0.015
            allow_stretch: True

<SlipIndicator>
    FloatLayout:
        size: root.size
        pos: root.pos
        canvas:
            Rectangle:
                size: self.height / 38 , self.height / 130
                pos: root.x + root.width/2 - (self.height / 38)/2 + root.height * root.slip, root.y + root.height * (0.875)    



# ==================================== Full Layout ====================================
<HorizonEverything>:
    FloatLayout:
        size: root.size
        pos: root.pos

        HorizonPitchAndRoll:
            pos: root.pos
            id: horPitchRoll
            canvas.before:
                PushMatrix:
                Rotate:
                    angle: root.roll
                    origin: root.center
            canvas.after:
                PopMatrix:

        RollTriangle:
            pos: root.pos
        SlipIndicator:
            pos: root.pos
            id: slipindicator

        Image:
            pos: root.pos
            source: 'images/center2.png'
            pos_hint: {'center_x': 0.5, 'top': 0.503}
            size_hint: 999, 0.035        # Big value to prevent being limited by size in x
            allow_stretch: True         # enable picture to scale above 100%, aspect ratio stays

    # StackLayout:                  # Sliders to set pitch and roll real-time
    #     size: root.size
    #     orientation: 'lr-bt'

    #     Slider:
    #         id: sliderPitch
    #         orientation: 'vertical'
    #         size_hint: None, 1
    #         min: -90
    #         max: 90
    #         on_touch_move: root.setPitch(sliderPitch.value)
    #         on_touch_down: root.setPitch(sliderPitch.value)
    #         on_touch_up: root.setPitch(sliderPitch.value)

    #     Slider:
    #         id: sliderRoll
    #         size_hint: 0.4, None
    #         min: -180
    #         max: 180
    #         on_touch_move: root.setRoll(sliderRoll.value)
    #         on_touch_down: root.setRoll(sliderRoll.value)
    #         on_touch_up: root.setRoll(sliderRoll.value)

    #     Slider:
    #         id: sliderSlip
    #         size_hint: 0.4, None
    #         min: -0.015
    #         max: 0.015
    #         on_touch_move: root.setSlip(sliderSlip.value)
    #         on_touch_down: root.setSlip(sliderSlip.value)
    #         on_touch_up: root.setSlip(sliderSlip.value)

# ==================================================================================================
# ===================================== Sectie Kompas ==============================================
# ==================================================================================================
# ==============Standaardwaarden voor een label==============
<ComLabel>
    font_size: self.height * 0.5    # Tekstgrootte schaalt automatisch mee met de hoogte van de knop
    text_size: self.size
    halign: 'center'                # Deze en de volgende twee lijnen zorgen voor text wrapping
    valign: 'middle'
    font_name: 'B612-Regular'


# ==============Compass components==========================
<Compass>:

    FloatLayout:
        size: root.size
        Image:
            source: 'images/compass2.png'
            size_hint: 0.8 , 0.8
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
            allow_stretch: True

<HeadingBug>:

    FloatLayout:
        size: root.size
        Image:
            source: 'images/bug.png'
            size: root.size
            pos_hint: {'center_x': 0.5, 'center_y': 0.9}
            size_hint: 999, 0.03
            allow_stretch: True

<Airplane>:

    FloatLayout:
        size: root.size
        Image:
            source: 'images/plane.png'
            size: root.size
            pos_hint: {'center_x': 0.5, 'center_y': 0.5}
            size_hint: 999, 0.1
            allow_stretch: True

<Pointer>:

    FloatLayout:
        size: root.size
        Image:
            source: 'images/rolltriangle.png'
            size_hint: 0.05 , 0.05
            pos_hint: {'center_x': 0.5, 'center_y': 0.05}
            allow_stretch: True
    
<CompassEverything>:
    canvas:
        Color:
            rgb: 0, 0, 0
        Rectangle:
            size: root.size

    FloatLayout:
        size: root.size

        Compass:
            id: Compass
            canvas.before:
                PushMatrix:
                Rotate:
                    angle: root.heading
                    origin: root.center
            canvas.after:
                PopMatrix:

        HeadingBug:
            id: HeadingBug
            canvas.before:
                PushMatrix:
                Rotate:
                    angle: root.heading + root.headingBug
                    origin: root.center
            canvas.after:
                PopMatrix:


        Airplane:
            id:Airplane

        Pointer:
            id:Pointer
            canvas.before:
                PushMatrix:
                Rotate:
                    angle: 180
                    origin: Pointer.center
            canvas.after:
                PopMatrix:

# ==================================================================================================
# ===================================== Sectie Knop ================================================
# ==================================================================================================
# ==============Standaardwaarden voor een label==============
<ButtonLabel@Label>
    font_size: self.height * 0.5    # Tekstgrootte schaalt automatisch mee met de hoogte van de knop
    text_size: self.size
    halign: 'center'                # Deze en de volgende twee lijnen zorgen voor text wrapping
    valign: 'middle'
    font_name: 'B612-regular'

# ==============Main lay-out==============
<BugButton>
    Button:
        size: root.size
        pos: root.pos
    BoxLayout:
        orientation: 'vertical'
        size: root.size
        pos: root.pos
        ButtonLabel:
            id: functionLabel
            text: 'unassigned'      # Unassigned verschijnt wanneer de labels niet geconfigureerd zijn
        NumberDisplay:
            pos: root.pos
            id: numberDisplay

<NumberDisplay>
    canvas:
        Color:
            rgb: 0, 0, 0
        Rectangle:                              # Zwarte rechthoek achter de tekst
            id: background
            size: self.width*3/4, self.height*3/4
            pos: root.x + self.width/8, root.y + self.height/6 + self.height/20
    ButtonLabel:
        id: numberLabel
        text: 'unassigned'           # Unassigned verschijnt wanneer de labels niet geconfigureerd zijn
        color: 0, 1, 0
        font_size: self.height * 0.6
        size: root.width*3/4, root.height*3/4                   # Waarden gekozen op basis van wat er goed uitzag
        pos: root.x + root.width/8, root.y + root.height/6 + root.height/20
        halign: 'right'
        padding: root.height/10, root.height/10